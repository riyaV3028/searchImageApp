{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91870\\\\Desktop\\\\imageSearchApp\\\\React_Image_Search_Application\\\\src\\\\components\\\\imageResults\\\\imageResults.js\";\n// import React, { useState } from 'react';\n// import PropTypes from 'prop-types';\n// import { GridList, GridTile } from 'material-ui/GridList';\n// import IconButton from 'material-ui/IconButton';\n// import ZoomIn from 'material-ui/svg-icons/action/zoom-in';\n// import Dialog from 'material-ui/Dialog';\n// import FlatButton from 'material-ui/FlatButton';\n// const ImageResults = ({ images }) => {\n//   const [open, setOpen] = useState(false);\n//   const [currentImg, setCurrentImg] = useState('');\n//   const handleOpen = (img) => {\n//     setOpen(true);\n//     setCurrentImg(img);\n//   };\n//   const handleClose = () => {\n//     setOpen(false);\n//   };\n//   let imageList;\n//   if (images) {\n//     imageList = (\n//       <GridList cols={4}>\n//         {images.map((img) => (\n//           <GridTile\n//             title={img.tags}\n//             key={img.id}\n//             actionIcon={\n//               <IconButton onClick={() => handleOpen(img.largeImageURL)}>\n//                 <ZoomIn color=\"white\" />\n//               </IconButton>\n//             }\n//           >\n//             <img src={img.largeImageURL} alt=\"\" />\n//           </GridTile>\n//         ))}\n//       </GridList>\n//     );\n//   } else {\n//     imageList = null;\n//   }\n//   const actions = [\n//     <FlatButton label=\"Close\" primary={true} onClick={handleClose} />\n//   ];\n//   return (\n//     <div style={{ marginLeft: 50, marginRight: 50, marginTop: 20 }}>\n//       {imageList}\n//       <Dialog\n//         actions={actions}\n//         modal={false}\n//         open={open}\n//         onRequestClose={handleClose}\n//       >\n//         <img src={currentImg} alt=\"\" style={{ width: '100%' }} />\n//       </Dialog>\n//     </div>\n//   );\n// };\n// ImageResults.propTypes = {\n//   images: PropTypes.array.isRequired\n// };\n// export default ImageResults;\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { GridList, GridTile } from 'material-ui/GridList';\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\n\nconst ImageResults = ({\n  images\n}) => {\n  const [open, setOpen] = useState(false);\n  const [currentImg, setCurrentImg] = useState('');\n\n  const handleOpen = img => {\n    setOpen(true);\n    setCurrentImg(img);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  let imageList;\n\n  if (images) {\n    imageList = /*#__PURE__*/React.createElement(GridList, {\n      cols: window.innerWidth < 768 ? 1 : 4,\n      style: {\n        width: '100%',\n        overflowY: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, images.map(img => /*#__PURE__*/React.createElement(GridTile, {\n      title: img.tags,\n      key: img.id,\n      actionIcon: /*#__PURE__*/React.createElement(IconButton, {\n        onClick: () => handleOpen(img.largeImageURL),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(ZoomIn, {\n        color: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: img.largeImageURL,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }))));\n  } else {\n    imageList = null;\n  }\n\n  const actions = [/*#__PURE__*/React.createElement(FlatButton, {\n    label: \"Close\",\n    primary: true,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  })];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: '20px auto',\n      maxWidth: '800px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, imageList, /*#__PURE__*/React.createElement(Dialog, {\n    actions: actions,\n    modal: false,\n    open: open,\n    onRequestClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: currentImg,\n    alt: \"\",\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  })));\n};\n\nImageResults.propTypes = {\n  images: PropTypes.array.isRequired\n};\nexport default ImageResults;","map":{"version":3,"sources":["C:/Users/91870/Desktop/imageSearchApp/React_Image_Search_Application/src/components/imageResults/imageResults.js"],"names":["React","useState","PropTypes","GridList","GridTile","IconButton","ZoomIn","Dialog","FlatButton","ImageResults","images","open","setOpen","currentImg","setCurrentImg","handleOpen","img","handleClose","imageList","window","innerWidth","width","overflowY","map","tags","id","largeImageURL","actions","margin","maxWidth","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["// import React, { useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import { GridList, GridTile } from 'material-ui/GridList';\r\n// import IconButton from 'material-ui/IconButton';\r\n// import ZoomIn from 'material-ui/svg-icons/action/zoom-in';\r\n// import Dialog from 'material-ui/Dialog';\r\n// import FlatButton from 'material-ui/FlatButton';\r\n\r\n// const ImageResults = ({ images }) => {\r\n//   const [open, setOpen] = useState(false);\r\n//   const [currentImg, setCurrentImg] = useState('');\r\n\r\n//   const handleOpen = (img) => {\r\n//     setOpen(true);\r\n//     setCurrentImg(img);\r\n//   };\r\n\r\n//   const handleClose = () => {\r\n//     setOpen(false);\r\n//   };\r\n\r\n//   let imageList;\r\n\r\n//   if (images) {\r\n//     imageList = (\r\n//       <GridList cols={4}>\r\n//         {images.map((img) => (\r\n//           <GridTile\r\n//             title={img.tags}\r\n//             key={img.id}\r\n//             actionIcon={\r\n//               <IconButton onClick={() => handleOpen(img.largeImageURL)}>\r\n//                 <ZoomIn color=\"white\" />\r\n//               </IconButton>\r\n//             }\r\n//           >\r\n//             <img src={img.largeImageURL} alt=\"\" />\r\n//           </GridTile>\r\n//         ))}\r\n//       </GridList>\r\n//     );\r\n//   } else {\r\n//     imageList = null;\r\n//   }\r\n\r\n//   const actions = [\r\n//     <FlatButton label=\"Close\" primary={true} onClick={handleClose} />\r\n//   ];\r\n\r\n//   return (\r\n//     <div style={{ marginLeft: 50, marginRight: 50, marginTop: 20 }}>\r\n//       {imageList}\r\n//       <Dialog\r\n//         actions={actions}\r\n//         modal={false}\r\n//         open={open}\r\n//         onRequestClose={handleClose}\r\n//       >\r\n//         <img src={currentImg} alt=\"\" style={{ width: '100%' }} />\r\n//       </Dialog>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// ImageResults.propTypes = {\r\n//   images: PropTypes.array.isRequired\r\n// };\r\n\r\n// export default ImageResults;\r\n\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GridList, GridTile } from 'material-ui/GridList';\r\nimport IconButton from 'material-ui/IconButton';\r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\r\nimport Dialog from 'material-ui/Dialog';\r\nimport FlatButton from 'material-ui/FlatButton';\r\n\r\nconst ImageResults = ({ images }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [currentImg, setCurrentImg] = useState('');\r\n\r\n  const handleOpen = (img) => {\r\n    setOpen(true);\r\n    setCurrentImg(img);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  let imageList;\r\n\r\n  if (images) {\r\n    imageList = (\r\n      <GridList\r\n        cols={window.innerWidth < 768 ? 1 : 4}\r\n        style={{ width: '100%', overflowY: 'auto' }}\r\n      >\r\n        {images.map((img) => (\r\n          <GridTile\r\n            title={img.tags}\r\n            key={img.id}\r\n            actionIcon={\r\n              <IconButton onClick={() => handleOpen(img.largeImageURL)}>\r\n                <ZoomIn color=\"white\" />\r\n              </IconButton>\r\n            }\r\n          >\r\n            <img src={img.largeImageURL} alt=\"\" />\r\n          </GridTile>\r\n        ))}\r\n      </GridList>\r\n    );\r\n  } else {\r\n    imageList = null;\r\n  }\r\n\r\n  const actions = [\r\n    <FlatButton label=\"Close\" primary={true} onClick={handleClose} />\r\n  ];\r\n\r\n  return (\r\n    <div style={{ margin: '20px auto', maxWidth: '800px' }}>\r\n      {imageList}\r\n      <Dialog\r\n        actions={actions}\r\n        modal={false}\r\n        open={open}\r\n        onRequestClose={handleClose}\r\n      >\r\n        <img src={currentImg} alt=\"\" style={{ width: '100%' }} />\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nImageResults.propTypes = {\r\n  images: PropTypes.array.isRequired\r\n};\r\n\r\nexport default ImageResults;\r\n"]},"metadata":{},"sourceType":"module"}